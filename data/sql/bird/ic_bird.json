[{"question_id": 195, "evidence": "most common bond type refers MAX(COUNT(bond_type))", "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T", "difficulty": "simple", "query": "What is the most common bond type?", "db": "toxicology", "gold": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T"}, {"question_id": 196, "evidence": "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'", "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'", "difficulty": "simple", "query": "In the non-carcinogenic molecules, how many contain chlorine atoms?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'"}, {"question_id": 197, "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')", "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'o' THEN T1.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'", "difficulty": "moderate", "query": "Calculate the average number of oxygen atoms in single-bonded molecules.", "db": "toxicology", "gold": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'o' THEN T1.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'"}, {"question_id": 198, "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))", "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.bond_type = '-' AND T3.label = '+' THEN T3.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T3.molecule_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id", "difficulty": "challenging", "query": "On average how many carcinogenic molecules are single bonded?", "db": "toxicology", "gold": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.bond_type = '-' AND T3.label = '+' THEN T3.molecule_id ELSE NULL END) AS REAL) / COUNT(DISTINCT T3.molecule_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id"}, {"question_id": 199, "evidence": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'", "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'", "difficulty": "simple", "query": "In the molecule containing sodium atoms, how many are non-carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'"}, {"question_id": 200, "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'", "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'", "difficulty": "simple", "query": "Find the triple-bonded molecules which are carcinogenic.", "db": "toxicology", "gold": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'"}, {"question_id": 201, "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = ' = '; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))", "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='", "difficulty": "moderate", "query": "What is the percentage of carbon in double-bond molecules?", "db": "toxicology", "gold": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='"}, {"question_id": 202, "evidence": "triple type bonds refers to bond_type = '#'", "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'", "difficulty": "simple", "query": "How many triple type bonds are there?", "db": "toxicology", "gold": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'"}, {"question_id": 203, "evidence": "atoms with no bromine refers to element ! = 'br'", "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'", "difficulty": "simple", "query": "In how many atoms is there no bromine?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'"}, {"question_id": 204, "evidence": "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic", "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'", "difficulty": "simple", "query": "Of the first 100 molecules in number order, how many are carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'"}, {"question_id": 205, "evidence": "silicon refers to element = 'si';", "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.element = 'si'", "difficulty": "simple", "query": "Identify by their ID the molecules in which there is silicon.", "db": "toxicology", "gold": "SELECT T.atom_id FROM atom AS T WHERE T.element = 'si'"}, {"question_id": 206, "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9'; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'", "difficulty": "challenging", "query": "What elements are in the TR004_8_9 bond atoms?", "db": "toxicology", "gold": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'"}, {"question_id": 207, "evidence": "double type bond refers to bond_type = ' = '; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='", "difficulty": "challenging", "query": "What elements are in a double type bond?", "db": "toxicology", "gold": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='"}, {"question_id": 208, "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t", "difficulty": "moderate", "query": "Which type of label is the most numerous in atoms with hydrogen?", "db": "toxicology", "gold": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t"}, {"question_id": 209, "evidence": "type of bond refers to bond_type; Tellurium refers to element = 'te'", "SQL": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te'", "difficulty": "simple", "query": "Tellurium is in what type of bond?", "db": "toxicology", "gold": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te'"}, {"question_id": 210, "evidence": "single type bond refers to bond_type = '-';", "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "difficulty": "simple", "query": "What atoms are connected in single type bonds?", "db": "toxicology", "gold": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'"}, {"question_id": 211, "evidence": "label = '-' means molecules are non-carcinogenic", "SQL": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'", "difficulty": "simple", "query": "Indicate which atoms are connected in non-carcinogenic type molecules.", "db": "toxicology", "gold": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'"}, {"question_id": 212, "evidence": "label = '-' means molecules are non-carcinogenic; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T.element FROM ( SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 4 ) t", "difficulty": "challenging", "query": "Which element is the least numerous in non-carcinogenic molecules?", "db": "toxicology", "gold": "SELECT T.element FROM ( SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 4 ) t"}, {"question_id": 213, "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id between atom_id = 'TR004_8' and atom_id = 'TR004_20';", "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'", "difficulty": "moderate", "query": "What type of bond is there between the atoms TR004_8 and TR004_20?", "db": "toxicology", "gold": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'"}, {"question_id": 214, "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'", "difficulty": "simple", "query": "What type of label is not on molecules with atoms with tin?", "db": "toxicology", "gold": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'"}, {"question_id": 215, "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-';", "SQL": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'", "difficulty": "challenging", "query": "How many atoms with iodine and sulfur type elements are there in single bond molecules?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'"}, {"question_id": 216, "evidence": "triple bond refers to bond_type = '#';", "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "difficulty": "simple", "query": "Identify all connected atoms with a triple bond.", "db": "toxicology", "gold": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"}, {"question_id": 217, "evidence": "TR181 molecule refers to molecule_id = 'TR181'", "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'", "difficulty": "simple", "query": "Identify all the atoms that are connected to the atoms of the TR181 molecule.", "db": "toxicology", "gold": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'"}, {"question_id": 218, "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f'), COUNT(molecule_id)) as percent where label = '+'", "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "difficulty": "challenging", "query": "What percentage of carcinogenic-type molecules does not contain fluorine?", "db": "toxicology", "gold": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"question_id": 219, "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#'), COUNT(bond_id)) as percent where label = '+'", "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'", "difficulty": "challenging", "query": "What is the percentage of carcinogenic molecules in triple type bonds?", "db": "toxicology", "gold": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'"}, {"question_id": 220, "evidence": "TR000 is the molecule id; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3", "difficulty": "challenging", "query": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.", "db": "toxicology", "gold": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3"}, {"question_id": 221, "evidence": "TR001 is the molecule id; TR001_2_6 is the bond id", "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'", "difficulty": "simple", "query": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "db": "toxicology", "gold": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'"}, {"question_id": 222, "evidence": "label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))", "SQL": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t", "difficulty": "moderate", "query": "What is the difference between the number of molecules that are carcinogenic and those that are not?", "db": "toxicology", "gold": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t"}, {"question_id": 223, "evidence": "TR_000_2_5 is the bond id", "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'", "difficulty": "simple", "query": "What are the atom IDs of the bond TR_000_2_5?", "db": "toxicology", "gold": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'"}, {"question_id": 224, "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2", "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'", "difficulty": "simple", "query": "What are the bond IDs that have the same atom ID 2 of TR000_2?", "db": "toxicology", "gold": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'"}, {"question_id": 225, "evidence": "double bond refers to bond_type = ' = ';", "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5", "difficulty": "simple", "query": "Please list top five molecules that have double bonds in alphabetical order.", "db": "toxicology", "gold": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5"}, {"question_id": 226, "evidence": "double bond refers to bond_type = ' = '; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(bond_id)) as percent where molecule_id = 'TR008'", "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR008'", "difficulty": "moderate", "query": "What is the percentage of double bonds in the molecule TR008?", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR008'"}, {"question_id": 227, "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent", "SQL": "SELECT CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id) FROM molecule t", "difficulty": "simple", "query": "What is the percentage of molecules that are carcinogenic?", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id) FROM molecule t"}, {"question_id": 228, "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'", "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR206'", "difficulty": "moderate", "query": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage.", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR206'"}, {"question_id": 229, "evidence": "type of bond refers to bond_type; TR000 is the molecule id", "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'", "difficulty": "simple", "query": "What is the type of bond that molecule TR000 has when involved in any bonds?", "db": "toxicology", "gold": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'"}, {"question_id": 230, "evidence": "TR060 is the molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'", "difficulty": "challenging", "query": "What are the elements of the toxicology and label of molecule TR060?", "db": "toxicology", "gold": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'"}, {"question_id": 231, "evidence": "TR018 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t", "difficulty": "challenging", "query": "Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?", "db": "toxicology", "gold": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t"}, {"question_id": 232, "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'", "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3", "difficulty": "moderate", "query": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.", "db": "toxicology", "gold": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3"}, {"question_id": 233, "evidence": "TR006 is the molecule id", "SQL": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2", "difficulty": "simple", "query": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.", "db": "toxicology", "gold": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2"}, {"question_id": 234, "evidence": "TR009 is the molecule id; molecule_id = 'TR009' means the bond_id LIKE 'TR009_%'; involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'", "SQL": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'", "difficulty": "moderate", "query": "How many bonds which involved atom 12 does molecule TR009 have?", "db": "toxicology", "gold": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'"}, {"question_id": 235, "evidence": "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'", "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'", "difficulty": "simple", "query": "How many molecules are carcinogenic and have the bromine element?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'"}, {"question_id": 236, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'; atoms refer to atom_id or atom_id2", "SQL": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'", "difficulty": "moderate", "query": "What are the bond type and the atoms of the bond ID of TR001_6_9?", "db": "toxicology", "gold": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'"}, {"question_id": 237, "evidence": "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic", "SQL": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'", "difficulty": "moderate", "query": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.", "db": "toxicology", "gold": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'"}, {"question_id": 238, "evidence": "triple bond refers to bond_type = '#';", "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'", "difficulty": "simple", "query": "How many molecules have a triple bond type?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'"}, {"question_id": 239, "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';", "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'", "difficulty": "simple", "query": "How many connections does the atom 19 have?", "db": "toxicology", "gold": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'"}, {"question_id": 240, "evidence": "TR004 is the molecule id; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'", "difficulty": "challenging", "query": "List all the elements of the toxicology of the molecule \"TR004\".", "db": "toxicology", "gold": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'"}, {"question_id": 241, "evidence": "label = '-' means molecules are non-carcinogenic", "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'", "difficulty": "simple", "query": "How many of the molecules are not carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'"}, {"question_id": 242, "evidence": "atoms from 21 to 25 refers to SUBSTRING(atom_id, 7, 2) between 21 and 25; label = '+' mean molecules are carcinogenic", "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'", "difficulty": "moderate", "query": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.", "db": "toxicology", "gold": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'"}, {"question_id": 243, "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'", "SQL": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'", "difficulty": "moderate", "query": "What are the bonds that have phosphorus and nitrogen as their atom elements?", "db": "toxicology", "gold": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'"}, {"question_id": 244, "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic", "SQL": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id", "difficulty": "moderate", "query": "Is the molecule with the most double bonds carcinogenic?", "db": "toxicology", "gold": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id"}, {"question_id": 245, "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'", "SQL": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'", "difficulty": "moderate", "query": "What is the average number of bonds the atoms with the element iodine have?", "db": "toxicology", "gold": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'"}, {"question_id": 246, "evidence": "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'", "difficulty": "moderate", "query": "List the bond type and the bond ID of the atom 45.", "db": "toxicology", "gold": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'"}, {"question_id": 247, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium; atoms cannot bond with other atoms means atom_id NOT in connected table;", "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )", "difficulty": "challenging", "query": "List all the elements of atoms that can not bond with any other atoms.", "db": "toxicology", "gold": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )"}, {"question_id": 248, "evidence": "TR447 is the molecule id; triple bond refers to bond_type = '#';", "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR447'", "difficulty": "simple", "query": "What are the atoms of the triple bond with the molecule \"TR447\"?", "db": "toxicology", "gold": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR447'"}, {"question_id": 249, "evidence": "TR144_8_19 is the bond id; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'", "difficulty": "challenging", "query": "What are the elements of the atoms of TR144_8_19?", "db": "toxicology", "gold": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'"}, {"question_id": 250, "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';", "SQL": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T", "difficulty": "moderate", "query": "Of all the carcinogenic molecules, which one has the most double bonds?", "db": "toxicology", "gold": "SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T"}, {"question_id": 251, "evidence": "label = '+' mean molecules are carcinogenic", "SQL": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t", "difficulty": "moderate", "query": "What is the least common element of all carcinogenic molecules?", "db": "toxicology", "gold": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t"}, {"question_id": 252, "evidence": "atom that has the element lead refers to atom_id where element = 'pb'", "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'", "difficulty": "simple", "query": "What are the atoms that can bond with the atom that has the element lead?", "db": "toxicology", "gold": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'"}, {"question_id": 253, "evidence": "triple bond refers to bond_type = '#'; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'", "difficulty": "challenging", "query": "List the elements of all the triple bonds.", "db": "toxicology", "gold": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'"}, {"question_id": 254, "evidence": "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))", "SQL": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )", "difficulty": "moderate", "query": "What percentage of bonds have the most common combination of atoms' elements?", "db": "toxicology", "gold": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )"}, {"question_id": 255, "evidence": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+'), COUNT(bond_id)) where bond_type = '-'", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'", "difficulty": "moderate", "query": "What proportion of single bonds are carcinogenic?", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'"}, {"question_id": 256, "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')", "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'", "difficulty": "simple", "query": "Calculate the total atoms consisting of the element carbon and hydrogen.", "db": "toxicology", "gold": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'"}, {"question_id": 257, "evidence": "element sulfur refers to element = 's'", "SQL": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'", "difficulty": "simple", "query": "List down atom id2 for atoms with element sulfur.", "db": "toxicology", "gold": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'"}, {"question_id": 258, "evidence": "element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'", "SQL": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'", "difficulty": "moderate", "query": "What are the bond type for atoms with element Tin?", "db": "toxicology", "gold": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'"}, {"question_id": 259, "evidence": "single bond refers to bond_type = '-';", "SQL": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "difficulty": "simple", "query": "How many elements are there for single bond molecules?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"}, {"question_id": 260, "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'", "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')", "difficulty": "moderate", "query": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.", "db": "toxicology", "gold": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')"}, {"question_id": 261, "evidence": "label = '+' mean molecules are carcinogenic", "SQL": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "difficulty": "simple", "query": "Write down bond id for molecules that are carcinogenic.", "db": "toxicology", "gold": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"question_id": 262, "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';", "SQL": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "difficulty": "simple", "query": "Among the single bond molecule id, which molecules are not carcinogenic?", "db": "toxicology", "gold": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"}, {"question_id": 263, "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'", "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T", "difficulty": "challenging", "query": "What is the composition of element chlorine in percentage among the single bond molecules?", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"}, {"question_id": 264, "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')", "difficulty": "simple", "query": "What are the labels for TR000, TR001 and TR002?", "db": "toxicology", "gold": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')"}, {"question_id": 265, "evidence": "label = '-' means molecules are non-carcinogenic", "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'", "difficulty": "simple", "query": "List down the molecule id for non carcinogenic molecules.", "db": "toxicology", "gold": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'"}, {"question_id": 266, "evidence": "label = '+' mean molecules are carcinogenic", "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'", "difficulty": "simple", "query": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "db": "toxicology", "gold": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'"}, {"question_id": 267, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'", "difficulty": "moderate", "query": "List down the bond type for molecules from molecule id TR000 to TR050.", "db": "toxicology", "gold": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'"}, {"question_id": 268, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10'", "difficulty": "challenging", "query": "What are the elements for bond id TR001_10?", "db": "toxicology", "gold": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10'"}, {"question_id": 269, "evidence": "iodine refers to element = 'i'", "SQL": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'", "difficulty": "simple", "query": "How many bond id have element iodine?", "db": "toxicology", "gold": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'"}, {"question_id": 270, "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)", "SQL": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1", "difficulty": "moderate", "query": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?", "db": "toxicology", "gold": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1"}, {"question_id": 271, "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'", "SQL": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')", "difficulty": "simple", "query": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "db": "toxicology", "gold": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')"}, {"question_id": 272, "evidence": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'", "difficulty": "moderate", "query": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.", "db": "toxicology", "gold": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'"}, {"question_id": 273, "evidence": "lead refers to element = 'pb'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'", "SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'pb' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "difficulty": "moderate", "query": "What is the percentage of element lead in carcinogenic molecules?", "db": "toxicology", "gold": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'pb' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"question_id": 274, "evidence": "TR001 is the molecule id", "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'", "difficulty": "simple", "query": "List the toxicology elements associated with molecule TR001.", "db": "toxicology", "gold": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'"}, {"question_id": 275, "evidence": "double bond refers to bond_type = ' = ';", "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='", "difficulty": "simple", "query": "Give me the molecule ID of the double bond type.", "db": "toxicology", "gold": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='"}, {"question_id": 276, "evidence": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';", "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'", "difficulty": "simple", "query": "Write down the atom IDs of the first and second atoms of triple bond type molecules.", "db": "toxicology", "gold": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"}, {"question_id": 277, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26'", "difficulty": "challenging", "query": "What are the toxicology elements associated with bond ID TR005_16_26?", "db": "toxicology", "gold": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26'"}, {"question_id": 278, "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';", "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'", "difficulty": "simple", "query": "How many of the single bond type molecules are non-carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"}, {"question_id": 279, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'", "difficulty": "simple", "query": "What is the label for bond ID TR001_10_11?", "db": "toxicology", "gold": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'"}, {"question_id": 280, "evidence": "triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'", "difficulty": "moderate", "query": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.", "db": "toxicology", "gold": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'"}, {"question_id": 281, "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = 4; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7", "difficulty": "challenging", "query": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.", "db": "toxicology", "gold": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7"}, {"question_id": 282, "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) / COUNT(T.atom_id) FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T UNION ALL SELECT DISTINCT T3.label FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T3", "difficulty": "challenging", "query": "What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label.", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) / COUNT(T.atom_id) FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T UNION ALL SELECT DISTINCT T3.label FROM ( SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' ) AS T3"}, {"question_id": 283, "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;", "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'", "difficulty": "moderate", "query": "Identify whether the chemical compound that contains Calcium is carcinogenic.", "db": "toxicology", "gold": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'"}, {"question_id": 284, "evidence": "Tellurium refers to element = 'te'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'", "difficulty": "moderate", "query": "Determine the bond type that is formed in the chemical compound containing element Tellurium.", "db": "toxicology", "gold": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'"}, {"question_id": 285, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)", "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'", "difficulty": "challenging", "query": "Name chemical elements that form a bond TR001_10_11.", "db": "toxicology", "gold": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'"}, {"question_id": 286, "evidence": "triple bond refers to bond_type = '#';", "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T", "difficulty": "simple", "query": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T"}, {"question_id": 287, "evidence": "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'", "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'", "difficulty": "moderate", "query": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'"}, {"question_id": 288, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'", "difficulty": "simple", "query": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.", "db": "toxicology", "gold": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'"}, {"question_id": 289, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'", "difficulty": "simple", "query": "Is molecule TR151 carcinogenic?", "db": "toxicology", "gold": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'"}, {"question_id": 290, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'", "difficulty": "challenging", "query": "Which toxic element can be found in the molecule TR151?", "db": "toxicology", "gold": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'"}, {"question_id": 291, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "difficulty": "simple", "query": "How many chemical compounds in the database are identified as carcinogenic.", "db": "toxicology", "gold": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'"}, {"question_id": 292, "evidence": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>10 AND substr(molecule_id, 3, 3) < 50", "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'", "difficulty": "simple", "query": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.", "db": "toxicology", "gold": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'"}, {"question_id": 293, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "difficulty": "simple", "query": "How many atoms belong to the molecule labeled with carcinogenic compounds?", "db": "toxicology", "gold": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"question_id": 294, "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';", "SQL": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='", "difficulty": "simple", "query": "Which bond ids are double-bond with carcinogenic compound?", "db": "toxicology", "gold": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='"}, {"question_id": 295, "evidence": "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'", "SQL": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'", "difficulty": "simple", "query": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?", "db": "toxicology", "gold": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'"}, {"question_id": 296, "evidence": "", "SQL": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'", "difficulty": "simple", "query": "Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.", "db": "toxicology", "gold": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'"}, {"question_id": 297, "evidence": "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'", "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'", "difficulty": "simple", "query": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?", "db": "toxicology", "gold": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"}, {"question_id": 298, "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0", "SQL": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "difficulty": "moderate", "query": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"question_id": 299, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'", "difficulty": "simple", "query": "Is molecule TR124 carcinogenic?", "db": "toxicology", "gold": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'"}, {"question_id": 300, "evidence": "TR186 is a molecule id", "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'", "difficulty": "simple", "query": "What atoms comprise TR186?", "db": "toxicology", "gold": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'"}, {"question_id": 301, "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'", "difficulty": "simple", "query": "What is the bond type of TR007_4_19?", "db": "toxicology", "gold": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'"}, {"question_id": 302, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'", "difficulty": "challenging", "query": "Name the elements that comprise the atoms of bond TR001_2_4.", "db": "toxicology", "gold": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'"}, {"question_id": 303, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';", "SQL": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label", "difficulty": "moderate", "query": "How many double bonds does TR006 have and is it carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label"}, {"question_id": 304, "evidence": "label = '+' mean molecules are carcinogenic; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'", "difficulty": "challenging", "query": "List all carcinogenic molecules and their elements.", "db": "toxicology", "gold": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"question_id": 305, "evidence": "single bond refers to bond_type = '-';", "SQL": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'", "difficulty": "simple", "query": "Name all bonds with single bond types and what atoms are connected to the molecules.", "db": "toxicology", "gold": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'"}, {"question_id": 306, "evidence": "triple bond refers to bond_type = '#'; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'", "difficulty": "challenging", "query": "Which molecules have triple bonds and list all the elements they contain.", "db": "toxicology", "gold": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'"}, {"question_id": 307, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'", "difficulty": "challenging", "query": "Name the atoms' elements that form bond TR000_2_3.", "db": "toxicology", "gold": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'"}, {"question_id": 308, "evidence": "chlorine refers to element = 'c'", "SQL": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'", "difficulty": "simple", "query": "How many bonds are created by bonding atoms with chlorine element?", "db": "toxicology", "gold": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'"}, {"question_id": 309, "evidence": "", "SQL": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id, T2.bond_type", "difficulty": "simple", "query": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?", "db": "toxicology", "gold": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id, T2.bond_type"}, {"question_id": 310, "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;", "SQL": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='", "difficulty": "moderate", "query": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='"}, {"question_id": 311, "evidence": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'", "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='", "difficulty": "simple", "query": "How many molecules without sulphur element is not having double bond?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='"}, {"question_id": 312, "evidence": "label = '+' mean molecules are carcinogenic", "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'", "difficulty": "simple", "query": "What is the carcinogenic label for bond TR001_2_4?", "db": "toxicology", "gold": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'"}, {"question_id": 313, "evidence": "", "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR005'", "difficulty": "simple", "query": "How many atoms belong to molecule id TR005?", "db": "toxicology", "gold": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR005'"}, {"question_id": 314, "evidence": "single bond refers to bond_type = '-';", "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'", "difficulty": "simple", "query": "How many single bonds are there in the list?", "db": "toxicology", "gold": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'"}, {"question_id": 315, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'", "difficulty": "simple", "query": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?", "db": "toxicology", "gold": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'"}, {"question_id": 316, "evidence": "label = '-' means molecules are non-carcinogenic", "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'", "difficulty": "simple", "query": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?", "db": "toxicology", "gold": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"}, {"question_id": 317, "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage", "SQL": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id", "difficulty": "moderate", "query": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.", "db": "toxicology", "gold": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id"}, {"question_id": 318, "evidence": "", "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'", "difficulty": "simple", "query": "What is the molecule id of bond id TR001_1_7?", "db": "toxicology", "gold": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'"}, {"question_id": 319, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'", "difficulty": "challenging", "query": "How many elements are contained in bond_id TR001_3_4?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'"}, {"question_id": 320, "evidence": "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'", "difficulty": "moderate", "query": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?", "db": "toxicology", "gold": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'"}, {"question_id": 321, "evidence": "", "SQL": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'", "difficulty": "simple", "query": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?", "db": "toxicology", "gold": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'"}, {"question_id": 322, "evidence": "atom with ID refers to atom_id; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'", "difficulty": "challenging", "query": "What is the element of toxicology for the atom with the ID of TR000_1?", "db": "toxicology", "gold": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'"}, {"question_id": 323, "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'", "difficulty": "simple", "query": "Is molecule TR000 is carcinogenic or not?", "db": "toxicology", "gold": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'"}, {"question_id": 324, "evidence": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage", "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t", "difficulty": "simple", "query": "Find the percentage of atoms with single bond.", "db": "toxicology", "gold": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t"}, {"question_id": 325, "evidence": "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;", "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'", "difficulty": "simple", "query": "How many carcinogenic molecules that consisted of Nitrogen?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'"}, {"question_id": 326, "evidence": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';", "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='", "difficulty": "simple", "query": "Which molecule consisted of Sulphur atom with double bond?", "db": "toxicology", "gold": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='"}, {"question_id": 327, "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5", "SQL": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t", "difficulty": "moderate", "query": "Which non-carcinogenic molecules consisted more than 5 atoms?", "db": "toxicology", "gold": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t"}, {"question_id": 328, "evidence": "triple bond refers to bond_type = '#'; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '#'", "difficulty": "challenging", "query": "List all the elements with triple bond, consisted in molecule TR024.", "db": "toxicology", "gold": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '#'"}, {"question_id": 329, "evidence": "label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))", "SQL": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t", "difficulty": "moderate", "query": "Which carcinogenic molecule have the highest number of atoms consisted in it?", "db": "toxicology", "gold": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t"}, {"question_id": 330, "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';", "SQL": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'", "difficulty": "challenging", "query": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.", "db": "toxicology", "gold": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'"}, {"question_id": 331, "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "difficulty": "simple", "query": "How many of the molecules are carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'"}, {"question_id": 332, "evidence": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';", "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'", "difficulty": "simple", "query": "Among the molecules between TR004 to TR010, how many of them has single bonds?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'"}, {"question_id": 333, "evidence": "carbon refers to element = 'c'", "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'", "difficulty": "simple", "query": "In the molecule TR008, how many carbons are present?", "db": "toxicology", "gold": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'"}, {"question_id": 334, "evidence": "label = '-' means molecules are non-carcinogenic; element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium", "SQL": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'", "difficulty": "challenging", "query": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?", "db": "toxicology", "gold": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'"}, {"question_id": 335, "evidence": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';", "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'", "difficulty": "simple", "query": "What is the total number of molecules with double bonded oxygen?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'"}, {"question_id": 336, "evidence": "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'", "difficulty": "simple", "query": "in molecules with triple bonds, how many of them are not carcinogenic?", "db": "toxicology", "gold": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'"}, {"question_id": 337, "evidence": "element = \u2018cl\u2019 means Chlorine; element = \u2018c\u2019 means Carbon; element = \u2018h\u2019 means Hydrogen; element = \u2018o\u2019 means Oxygen, element = \u2019s\u2019 means Sulfur; element = \u2019n\u2019 means Nitrogen, element = \u2018p\u2019 means Phosphorus, element = \u2018na\u2019 means Sodium, element = \u2018br\u2019 means Bromine, element = \u2018f\u2019 means Fluorine; element = \u2018i\u2019 means Iodine; element = \u2018sn\u2019 means Tin; element = \u2018pb\u2019 means Lead; element = \u2018te\u2019 means Tellurium; element = \u2018ca\u2019 means Calcium; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'", "difficulty": "challenging", "query": "List the element and bond type included in the molecule with molecule ID of TR016.", "db": "toxicology", "gold": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'"}, {"question_id": 338, "evidence": "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';", "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'", "difficulty": "moderate", "query": "What is the atom ID of double bonded carbon in TR012 molecule?", "db": "toxicology", "gold": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'"}, {"question_id": 339, "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'", "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'", "difficulty": "simple", "query": "List the atom ID of the carcinogenic molecule that contains oxygen?", "db": "toxicology", "gold": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'"}, {"question_id": 717, "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'", "difficulty": "simple", "query": "Please list all the superpowers of 3-D Man.", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'"}, {"question_id": 718, "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'", "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'", "difficulty": "simple", "query": "How many superheroes have the super power of \"Super Strength\"?", "db": "superhero", "gold": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'"}, {"question_id": 719, "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200", "difficulty": "moderate", "query": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200"}, {"question_id": 720, "evidence": "15 super powers refers to COUNT(full_name) > 15", "SQL": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15", "difficulty": "simple", "query": "Please list the full names of all the superheroes with over 15 super powers.", "db": "superhero", "gold": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15"}, {"question_id": 721, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'", "difficulty": "simple", "query": "How many superheroes have blue eyes?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'"}, {"question_id": 722, "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'", "difficulty": "simple", "query": "What is the colour of Apocalypse's skin?", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'"}, {"question_id": 723, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'", "difficulty": "moderate", "query": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'"}, {"question_id": 724, "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'", "difficulty": "challenging", "query": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'"}, {"question_id": 725, "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'", "difficulty": "simple", "query": "How many superheroes are published by Marvel Comics?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"}, {"question_id": 726, "evidence": "the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1", "difficulty": "moderate", "query": "Please give the full name of the tallest hero published by Marvel Comics.", "db": "superhero", "gold": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1"}, {"question_id": 727, "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'", "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'", "difficulty": "simple", "query": "Who is the publisher of Sauron?", "db": "superhero", "gold": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'"}, {"question_id": 728, "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'", "difficulty": "moderate", "query": "Among the superheroes from Marvel Comics, how many of them have blue eyes?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'"}, {"question_id": 729, "evidence": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)", "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'", "difficulty": "simple", "query": "What is the average height of the superheroes from Marvel Comics?", "db": "superhero", "gold": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"}, {"question_id": 730, "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength'; Calculation = MULTIPLY(DIVIDE(SUM(power_name = 'Super Strength'), COUNT(id)), 100)", "SQL": "SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics'", "difficulty": "challenging", "query": "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics'"}, {"question_id": 731, "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'", "difficulty": "simple", "query": "How many superheroes did DC Comics publish?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'"}, {"question_id": 732, "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name", "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1", "difficulty": "moderate", "query": "Which publisher published the slowest superhero?", "db": "superhero", "gold": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1"}, {"question_id": 733, "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'", "difficulty": "moderate", "query": "How many gold-eyed superheroes did Marvel Comics publish?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'"}, {"question_id": 734, "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'", "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'", "difficulty": "simple", "query": "What is the publisher's name of Blue Beetle II?", "db": "superhero", "gold": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'"}, {"question_id": 735, "evidence": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'", "difficulty": "simple", "query": "How many superheroes with blonde hair are there?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'"}, {"question_id": 736, "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1", "difficulty": "moderate", "query": "Who is the dumbest superhero?", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1"}, {"question_id": 737, "evidence": "Copycat is the superhero_name;", "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'", "difficulty": "simple", "query": "What is Copycat's race?", "db": "superhero", "gold": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'"}, {"question_id": 738, "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50", "SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50", "difficulty": "simple", "query": "How many superheroes have durability of less than 50?", "db": "superhero", "gold": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50"}, {"question_id": 739, "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'", "difficulty": "moderate", "query": "What are the names of the superheroes with the power of death touch?", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'"}, {"question_id": 740, "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'", "difficulty": "moderate", "query": "How many female superheroes have a strength value of 100?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'"}, {"question_id": 741, "evidence": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1", "difficulty": "simple", "query": "What is the name of the superhero that has the most powers?", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1"}, {"question_id": 742, "evidence": "vampire superheroes refers to race = 'Vampire'", "SQL": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'", "difficulty": "simple", "query": "How many vampire superheroes are there?", "db": "superhero", "gold": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}, {"question_id": 743, "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)", "SQL": "SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'", "difficulty": "challenging", "query": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.", "db": "superhero", "gold": "SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'"}, {"question_id": 744, "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))", "SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id", "difficulty": "challenging", "query": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.", "db": "superhero", "gold": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id"}, {"question_id": 745, "evidence": "Star Treck is the publisher_name;", "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'", "difficulty": "simple", "query": "Give the publisher ID of Star Trek.", "db": "superhero", "gold": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'"}, {"question_id": 746, "evidence": "average attribute value of all superheroes refers to AVG(attribute_value)", "SQL": "SELECT AVG(attribute_value) FROM hero_attribute", "difficulty": "simple", "query": "Calculate the average attribute value of all superheroes.", "db": "superhero", "gold": "SELECT AVG(attribute_value) FROM hero_attribute"}, {"question_id": 747, "evidence": "superheroes without full name refers to full_name IS NULL", "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL", "difficulty": "simple", "query": "What is the total number of superheroes without full name?", "db": "superhero", "gold": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL"}, {"question_id": 748, "evidence": "eye colour refers to colour where eye_colour_id = colour.id;", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75", "difficulty": "simple", "query": "What is the eye colour of superhero with superhero ID 75?", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75"}, {"question_id": 749, "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'", "difficulty": "simple", "query": "Provide the superpowers of the superhero called Deathlok.", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'"}, {"question_id": 750, "evidence": "female refers to gender_id = 2; average weight refers to AVG(weight_kg)", "SQL": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'", "difficulty": "simple", "query": "What is the average weight of all female superheroes?", "db": "superhero", "gold": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'"}, {"question_id": 751, "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5", "difficulty": "moderate", "query": "List down at least five superpowers of male superheroes.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5"}, {"question_id": 752, "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'", "difficulty": "simple", "query": "Give the name of the alien superheroes.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"}, {"question_id": 753, "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to eye_colour_id = 1", "SQL": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour LIKE 'No Colour'", "difficulty": "moderate", "query": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.", "db": "superhero", "gold": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour LIKE 'No Colour'"}, {"question_id": 754, "evidence": "superpower refers to hero_power", "SQL": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56", "difficulty": "simple", "query": "What is the superpower of hero ID 56?", "db": "superhero", "gold": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56"}, {"question_id": 755, "evidence": "Demi-God superheroes refers to race = 'Demi-God'", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'", "difficulty": "simple", "query": "List down at least five full name of Demi-God superheroes.", "db": "superhero", "gold": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'"}, {"question_id": 756, "evidence": "bad superheroes refers to alignment_id = Bad", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'", "difficulty": "simple", "query": "How many bad superheroes are there?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'"}, {"question_id": 757, "evidence": "weighed 169 kg refers to weight_kg = 169", "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169", "difficulty": "simple", "query": "Identify the race of the superhero who weighed 169 kg.", "db": "superhero", "gold": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169"}, {"question_id": 758, "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;", "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'", "difficulty": "moderate", "query": "Provide the hair colour of the human superhero who is 185 cm tall.", "db": "superhero", "gold": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'"}, {"question_id": 759, "evidence": "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1", "difficulty": "simple", "query": "What is the eye clolour of the heaviest superhero?", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1"}, {"question_id": 760, "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_id = 13; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180", "difficulty": "challenging", "query": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180"}, {"question_id": 761, "evidence": "male refers to gender_id = 1; calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79", "difficulty": "moderate", "query": "Among the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes.", "db": "superhero", "gold": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79"}, {"question_id": 762, "evidence": "power that superheroes have the most refers to MAX(COUNT(power_name))", "SQL": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1", "difficulty": "simple", "query": "Which power do superheroes have the most of?", "db": "superhero", "gold": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1"}, {"question_id": 763, "evidence": "Abomination refers to superhero_name = 'Abomination';", "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'", "difficulty": "simple", "query": "Indicate the attribute value of superhero Abomination.", "db": "superhero", "gold": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'"}, {"question_id": 764, "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;", "SQL": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1", "difficulty": "simple", "query": "What are the superpowers of heroes with ID 1?", "db": "superhero", "gold": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1"}, {"question_id": 765, "evidence": "stealth power refers to power_name = 'stealth';", "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'", "difficulty": "simple", "query": "How many heroes have stealth power?", "db": "superhero", "gold": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'"}, {"question_id": 766, "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1", "difficulty": "moderate", "query": "What is the hero's full name with the highest attribute in strength?", "db": "superhero", "gold": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1"}, {"question_id": 767, "evidence": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;", "SQL": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id", "difficulty": "simple", "query": "What is the average of superheroes with no skin colour?", "db": "superhero", "gold": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id"}, {"question_id": 768, "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'", "difficulty": "simple", "query": "How many superheroes were published by Dark Horse Comics?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'"}, {"question_id": 769, "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1", "difficulty": "challenging", "query": "Which superhero has the most durability published by Dark Horse Comics?", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1"}, {"question_id": 770, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'", "difficulty": "simple", "query": "What is the eyes colour of Abraham Sapien?", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'"}, {"question_id": 771, "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'", "difficulty": "simple", "query": "List the name of superheroes with flight power.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'"}, {"question_id": 772, "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';", "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'", "difficulty": "challenging", "query": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.", "db": "superhero", "gold": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'"}, {"question_id": 773, "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;", "SQL": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T1.hair_colour_id = T1.skin_colour_id = T3.id", "difficulty": "challenging", "query": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.", "db": "superhero", "gold": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T1.hair_colour_id = T1.skin_colour_id = T3.id"}, {"question_id": 774, "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';", "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'", "difficulty": "simple", "query": "Which group does superhero A-Bomb belong to?", "db": "superhero", "gold": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'"}, {"question_id": 775, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color; female refers to gender = 'Female';", "SQL": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'", "difficulty": "challenging", "query": "What is the percentage of blue female superheroes among all female superheroes?", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'"}, {"question_id": 776, "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;", "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'", "difficulty": "simple", "query": "Provide the hero name and race of Charles Chandler.", "db": "superhero", "gold": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'"}, {"question_id": 777, "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';", "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'", "difficulty": "simple", "query": "What is the gender of Agent 13 hero?", "db": "superhero", "gold": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'"}, {"question_id": 778, "evidence": "adaptation power refers to power_name = 'Adaptation';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'", "difficulty": "simple", "query": "Provide superheroes' names who have the adaptation power.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'"}, {"question_id": 779, "evidence": "Amazo hero refers to superhero_name = 'Amazo';", "SQL": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'", "difficulty": "simple", "query": "How many powers does Amazo hero have?", "db": "superhero", "gold": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'"}, {"question_id": 780, "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'", "difficulty": "simple", "query": "List the powers of Hunter Zolomon.", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'"}, {"question_id": 781, "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;", "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'", "difficulty": "simple", "query": "Provide the heights of the heroes whose eye colours are amber.", "db": "superhero", "gold": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'"}, {"question_id": 782, "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'", "difficulty": "moderate", "query": "List the heroes' names whose eyes and hair colours are both black.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'"}, {"question_id": 783, "evidence": "eye colours refers to eye_colour_id; skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Gold'", "difficulty": "simple", "query": "Provide the eye colours of the heroes whose skin colours are gold.", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Gold'"}, {"question_id": 784, "evidence": "vampire heroes refers to race = 'Vampire';", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'", "difficulty": "simple", "query": "Provide the full names of vampire heroes.", "db": "superhero", "gold": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}, {"question_id": 785, "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "difficulty": "simple", "query": "Describe the names of neutral alignment superheroes.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"question_id": 786, "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';", "SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )", "difficulty": "moderate", "query": "How many heroes have the highest attribute value in strength?", "db": "superhero", "gold": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )"}, {"question_id": 787, "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';", "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'", "difficulty": "simple", "query": "What are the race and alignment of Cameron Hicks?", "db": "superhero", "gold": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'"}, {"question_id": 788, "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'", "difficulty": "challenging", "query": "How many percent of female heroes were published by Marvel Comics?", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'"}, {"question_id": 789, "evidence": "average = AVG(weight_kg); aliens refers to race = 'Alien';", "SQL": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'", "difficulty": "simple", "query": "Find the average weight of the heroes who are aliens.", "db": "superhero", "gold": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"}, {"question_id": 790, "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;", "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE", "difficulty": "moderate", "query": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.", "db": "superhero", "gold": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE"}, {"question_id": 791, "evidence": "average = DIVIDE(SUM(height_cm), COUNT(full_name));", "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(full_name) FROM superhero", "difficulty": "simple", "query": "Calculate the average height for each superhero.", "db": "superhero", "gold": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(full_name) FROM superhero"}, {"question_id": 792, "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'", "difficulty": "simple", "query": "What is Abomination's superpower?", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'"}, {"question_id": 793, "evidence": "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1", "SQL": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1", "difficulty": "simple", "query": "Among the superheroes with the race of god/eternal, how many of them are male", "db": "superhero", "gold": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1"}, {"question_id": 794, "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1", "difficulty": "moderate", "query": "Which hero was the fastest?", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1"}, {"question_id": 795, "evidence": "neutral alignment refers to alignment_id = 3;", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "difficulty": "simple", "query": "How many superheroes have a neutral alignment?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"question_id": 796, "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;", "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'", "difficulty": "moderate", "query": "State all of 3-D Man's attributes along with their values.", "db": "superhero", "gold": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'"}, {"question_id": 797, "evidence": "which superheroes refers to superhero_name; blue eyes refers to eye_colour_id = 7; brown hair refers to hair_colour_id = 9;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'", "difficulty": "moderate", "query": "Which superheroes have blue eyes with brown hair?", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'"}, {"question_id": 798, "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';", "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')", "difficulty": "moderate", "query": "What is the publisher for Hawkman, Karate Kid and Speedy?", "db": "superhero", "gold": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"}, {"question_id": 799, "evidence": "didn't have any publisher refers to publisher.id = 1;", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1", "difficulty": "simple", "query": "How many superheroes didn't have any publisher?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1"}, {"question_id": 800, "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE eye_colour_id = 7), COUNT(superhero_name)), 100.0); blue eyes refers to eye_colour_id = 7;", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id", "difficulty": "moderate", "query": "Calculate the percentage of superheroes with blue eyes.", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id"}, {"question_id": 801, "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender_id = 1; female superheroes refers to gender_id = 2;", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id", "difficulty": "moderate", "query": "Find the ratio between male superheroes and female superheroes.", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id"}, {"question_id": 802, "evidence": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);", "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "difficulty": "simple", "query": "Who is the tallest superhero?", "db": "superhero", "gold": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"}, {"question_id": 803, "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';", "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'", "difficulty": "simple", "query": "What is the power ID of cryokinesis?", "db": "superhero", "gold": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'"}, {"question_id": 804, "evidence": "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;", "SQL": "SELECT superhero_name FROM superhero WHERE id = 294", "difficulty": "simple", "query": "Provide the name of superhero with superhero ID 294.", "db": "superhero", "gold": "SELECT superhero_name FROM superhero WHERE id = 294"}, {"question_id": 805, "evidence": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;", "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)", "difficulty": "simple", "query": "List the full names of superheroes with missing weight.", "db": "superhero", "gold": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)"}, {"question_id": 806, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'", "difficulty": "simple", "query": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'"}, {"question_id": 807, "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'", "difficulty": "simple", "query": "What is the superpowers of the superhero has Helen Parr as their full name?", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'"}, {"question_id": 808, "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;", "SQL": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188", "difficulty": "simple", "query": "Find the race of the superhero who weighs 108kg and is 188cm tall.", "db": "superhero", "gold": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"}, {"question_id": 809, "evidence": "superhero ID 38 refers to superhero.id = 38;", "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38", "difficulty": "simple", "query": "What is the publisher name of the superhero ID 38?", "db": "superhero", "gold": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38"}, {"question_id": 810, "evidence": "maximum attribute value refers to MAX(attribute_value);", "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1", "difficulty": "simple", "query": "What is the race of the superhero with maximum attribute value?", "db": "superhero", "gold": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1"}, {"question_id": 811, "evidence": "superpowers refers to power_name;", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Atom IV'", "difficulty": "simple", "query": "Give the alignment and superpowers of the superhero named Atom IV.", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Atom IV'"}, {"question_id": 812, "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5", "difficulty": "simple", "query": "List down at least five full names of superheroes with blue eyes.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5"}, {"question_id": 813, "evidence": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;", "SQL": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'", "difficulty": "simple", "query": "Calculate the average attribute value of all neutral superheroes.", "db": "superhero", "gold": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'"}, {"question_id": 814, "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;", "SQL": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100", "difficulty": "moderate", "query": "List the skin colour of the superheroes with 100 attribute value.", "db": "superhero", "gold": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100"}, {"question_id": 815, "evidence": "good refers to alignment.id = 1; female refers to gender.id = 2;", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'", "difficulty": "simple", "query": "Count the good female superheroes.", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'"}, {"question_id": 816, "evidence": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80", "difficulty": "simple", "query": "Provide the names of superheroes with attribute value between 75 to 80.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80"}, {"question_id": 817, "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';", "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'", "difficulty": "moderate", "query": "Give the race of the blue-haired male superhero.", "db": "superhero", "gold": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'"}, {"question_id": 818, "evidence": "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;", "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'", "difficulty": "challenging", "query": "Among the bad superheroes, what is the percentage of female superheroes?", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'"}, {"question_id": 819, "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;", "SQL": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg = NULL", "difficulty": "challenging", "query": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.", "db": "superhero", "gold": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg = NULL"}, {"question_id": 820, "evidence": "how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';", "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'", "difficulty": "moderate", "query": "How strong is the Hulk?", "db": "superhero", "gold": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'"}, {"question_id": 821, "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'", "difficulty": "simple", "query": "List down Ajax's superpowers.", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'"}, {"question_id": 822, "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'", "difficulty": "moderate", "query": "How many green-skinned villains are there in the superhero universe?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'"}, {"question_id": 823, "evidence": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';", "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'", "difficulty": "moderate", "query": "How many female superheroes are in Marvel Comics?", "db": "superhero", "gold": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'"}, {"question_id": 824, "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name", "difficulty": "moderate", "query": "Identify superheroes who can control wind and list their names in alphabetical order.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name"}, {"question_id": 825, "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';", "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'", "difficulty": "moderate", "query": "Identify the gender of the superhero who has the ability of Phoenix Force.", "db": "superhero", "gold": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'"}, {"question_id": 826, "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1", "difficulty": "simple", "query": "Identify the heaviest superhero in DC Comics.", "db": "superhero", "gold": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1"}, {"question_id": 827, "evidence": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';", "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'", "difficulty": "moderate", "query": "What is the average height of a non-human superhero in Dark Horse Comics?", "db": "superhero", "gold": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'"}, {"question_id": 828, "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';", "SQL": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.attribute_value DESC LIMIT 1", "difficulty": "simple", "query": "Count the fastest superheroes.", "db": "superhero", "gold": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.attribute_value DESC LIMIT 1"}, {"question_id": 829, "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; if SUM(publisher_name = 'DC Comics') > SUM(publisher_name = 'Marvel Comics'), it means DC Comics published more superheroes than Marvel Comics; if SUM(publisher_name = 'Marvel Comics') > SUM(publisher_name = 'Marvel Comics'), it means Marvel Comics published more heroes than DC Comics; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));", "SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id", "difficulty": "challenging", "query": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.", "db": "superhero", "gold": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id"}, {"question_id": 830, "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';", "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1", "difficulty": "moderate", "query": "Identify the weakest attribute of the Black Panther.", "db": "superhero", "gold": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1"}, {"question_id": 831, "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'", "difficulty": "simple", "query": "What is Abomination's eye colour?", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'"}, {"question_id": 832, "evidence": "tallest superhero refers to MAX(height_cm);", "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1", "difficulty": "simple", "query": "Name the tallest superhero.", "db": "superhero", "gold": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"}, {"question_id": 833, "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;", "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'", "difficulty": "simple", "query": "Name the superhero, otherwise known as Charles Chandler.", "db": "superhero", "gold": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"}, {"question_id": 834, "evidence": "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';", "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'", "difficulty": "challenging", "query": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'"}, {"question_id": 835, "evidence": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';", "SQL": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'", "difficulty": "challenging", "query": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.", "db": "superhero", "gold": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'"}, {"question_id": 836, "evidence": "have John as their first name refers to full_name LIKE 'John%';", "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'", "difficulty": "simple", "query": "What is the total number of superheroes that have John as their first name?", "db": "superhero", "gold": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'"}, {"question_id": 837, "evidence": "lowest attribute value refers to MIN(attribute_value);", "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )", "difficulty": "simple", "query": "Give the hero ID of superhero with the lowest attribute value.", "db": "superhero", "gold": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )"}, {"question_id": 838, "evidence": "FALSE;", "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'", "difficulty": "simple", "query": "Provide the full name of the superhero named Alien.", "db": "superhero", "gold": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'"}, {"question_id": 839, "evidence": "weight less than 100 refers to weight_kg < 100", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'", "difficulty": "simple", "query": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.", "db": "superhero", "gold": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'"}, {"question_id": 840, "evidence": "FALSE;", "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'", "difficulty": "simple", "query": "List the attribute value of the superhero named Aquababy.", "db": "superhero", "gold": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'"}, {"question_id": 841, "evidence": "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;", "SQL": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40", "difficulty": "simple", "query": "Provide the weight and race of the superhero with superhero ID 40.", "db": "superhero", "gold": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40"}, {"question_id": 842, "evidence": "", "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'", "difficulty": "simple", "query": "Calculate the average height of all neutral superheroes.", "db": "superhero", "gold": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"question_id": 843, "evidence": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';", "SQL": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'", "difficulty": "simple", "query": "List the hero ID of superheroes have intellegence as their power.", "db": "superhero", "gold": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'"}, {"question_id": 844, "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';", "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'", "difficulty": "simple", "query": "Give the eye colour of Blackwulf.", "db": "superhero", "gold": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'"}, {"question_id": 845, "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);", "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80", "difficulty": "moderate", "query": "List the power of superheroes with height greater than 80% of the average height of all superheroes.", "db": "superhero", "gold": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80"}, {"question_id": 1470, "evidence": "", "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'", "difficulty": "simple", "query": "How many gas stations in CZE has Premium gas?", "db": "debit_card_specializing", "gold": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"}, {"question_id": 1471, "evidence": "ratio of costumers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').", "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers", "difficulty": "simple", "query": "What is the ratio of costumers who pay in EUR against customers who pay in CZK?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers"}, {"question_id": 1472, "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012", "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.date BETWEEN 201201 AND 201212 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "difficulty": "moderate", "query": "In 2012, who had the least consumption in LAM?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.date BETWEEN 201201 AND 201212 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"question_id": 1473, "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312, which means between January and December in 2013", "SQL": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'", "difficulty": "moderate", "query": "What was the average monthly consumption of customers in SME for the year 2013?", "db": "debit_card_specializing", "gold": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'"}, {"question_id": 1474, "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011", "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "moderate", "query": "Which customers, paying in CZK, consumed the most gas in 2011?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1475, "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012", "SQL": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1", "difficulty": "moderate", "query": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?", "db": "debit_card_specializing", "gold": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1"}, {"question_id": 1476, "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012", "SQL": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2012'", "difficulty": "challenging", "query": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?", "db": "debit_card_specializing", "gold": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2012'"}, {"question_id": 1477, "evidence": "", "SQL": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "simple", "query": "Which year recorded the most gas use paid in EUR?", "db": "debit_card_specializing", "gold": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1478, "evidence": "", "SQL": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "difficulty": "simple", "query": "Which segment had the least consumption?", "db": "debit_card_specializing", "gold": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"question_id": 1479, "evidence": "The first 4 strings of the values in the table yearmonth can represent year.", "SQL": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "moderate", "query": "Which year recorded the most consumption of gas paid in CZK?", "db": "debit_card_specializing", "gold": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1480, "evidence": "'in 2013' refers to the first 4 strings of yearmonth.date = '2013', The 5th and 6th string of the date can refer to month.", "SQL": "SELECT SUBSTRING(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTRING(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "moderate", "query": "What was the gas consumption peak month for SME customers in 2013?", "db": "debit_card_specializing", "gold": "SELECT SUBSTRING(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTRING(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTRING(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1481, "evidence": "annual average of customer with the lowest consumption in each segment = total consumption per year / 3 years; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; First 4 strings of Date represents the year.", "SQL": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date >= 201301", "difficulty": "challenging", "query": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS FLOAT) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date >= 201301"}, {"question_id": 1482, "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; Between 2012 And 2013 can be represented by Between 201201 And 201312; First 4 strings of Date represents the year.", "SQL": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID", "difficulty": "challenging", "query": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?", "db": "debit_card_specializing", "gold": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID"}, {"question_id": 1483, "evidence": "Between August And November 2013 refers to Between 201308 And 201311; First 4 strings of Date represents the year.", "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'", "difficulty": "simple", "query": "How much did customer 6 consume in total between August and November 2013?", "db": "debit_card_specializing", "gold": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'"}, {"question_id": 1484, "evidence": "Computation of more discount = Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia", "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'", "difficulty": "simple", "query": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?", "db": "debit_card_specializing", "gold": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'"}, {"question_id": 1485, "evidence": "April 2013 refers to 201304 in the yearmonth.date", "SQL": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'", "difficulty": "simple", "query": "How much more was customer 7 consuming in April 2013 than customer 5?", "db": "debit_card_specializing", "gold": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'"}, {"question_id": 1486, "evidence": "Amount of more SMEs = Total of SMEs uses Czech Koruna - Total of SMEs uses Euro", "SQL": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'", "difficulty": "simple", "query": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?", "db": "debit_card_specializing", "gold": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'"}, {"question_id": 1487, "evidence": "October 2013 refers to 201310 in the yearmonth.date", "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "moderate", "query": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1488, "evidence": "", "SQL": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "simple", "query": "Who among KAM's customers consumed the most? How much did it consume?", "db": "debit_card_specializing", "gold": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1489, "evidence": "May 2013 refers to yearmonth.date = 201305", "SQL": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'", "difficulty": "simple", "query": "How much did the KAM customers consume in total in May 2013?", "db": "debit_card_specializing", "gold": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'"}, {"question_id": 1490, "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100%.", "SQL": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'", "difficulty": "moderate", "query": "How many percent of LAM customer consumed more than 46.73?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'"}, {"question_id": 1491, "evidence": "", "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1", "difficulty": "simple", "query": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.", "db": "debit_card_specializing", "gold": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1"}, {"question_id": 1492, "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.", "SQL": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'", "difficulty": "simple", "query": "What percentage of KAM customers pay in euros?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'"}, {"question_id": 1493, "evidence": "February 2012 refers to '201202' in yearmonth.date", "SQL": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'", "difficulty": "simple", "query": "In February 2012, what percentage of customers consumed more than 528.3?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'"}, {"question_id": 1494, "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.", "SQL": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'", "difficulty": "simple", "query": "What percentage of Slovakian gas stations are premium?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'"}, {"question_id": 1495, "evidence": "September 2013 refers to yearmonth.date = '201309'", "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1", "difficulty": "simple", "query": "Which client ID consumed the most in September 2013?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"question_id": 1496, "evidence": "September 2013 refers to yearmonth.date = '201309'", "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "difficulty": "simple", "query": "Which client segment consumed the least in September 2013?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"question_id": 1497, "evidence": "June 2012 refers to yearmonth.date = '201606'", "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1", "difficulty": "simple", "query": "Which SME customer consumed the least in June 2012?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"question_id": 1498, "evidence": "The first 4 strings of yearmonth.date can represent the year.", "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012' GROUP BY SUBSTRING(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1", "difficulty": "simple", "query": "What is the highest monthly consumption in the year 2012?", "db": "debit_card_specializing", "gold": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012' GROUP BY SUBSTRING(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1"}, {"question_id": 1499, "evidence": "Monthly consumption = SUM(consumption) / 12", "SQL": "SELECT T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' ORDER BY T2.Consumption DESC LIMIT 1", "difficulty": "simple", "query": "What is the biggest monthly consumption of the customers who use euro as their currency?", "db": "debit_card_specializing", "gold": "SELECT T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' ORDER BY T2.Consumption DESC LIMIT 1"}, {"question_id": 1500, "evidence": "September 2013 refers to 201309; First 4 strings represent the year", "SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'", "difficulty": "simple", "query": "Please list the product description of the products consumed in September, 2013.", "db": "debit_card_specializing", "gold": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'"}, {"question_id": 1501, "evidence": "September 2013 refers to '201306'; First 4 strings represent the year", "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'", "difficulty": "moderate", "query": "Please list the countries of the gas stations with transactions taken place in June, 2013.", "db": "debit_card_specializing", "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'"}, {"question_id": 1502, "evidence": "", "SQL": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'", "difficulty": "simple", "query": "Please list the chains of the gas stations with transactions in euro.", "db": "debit_card_specializing", "gold": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'"}, {"question_id": 1503, "evidence": "", "SQL": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'", "difficulty": "simple", "query": "Please list the product description of the products bought in transactions in euro.", "db": "debit_card_specializing", "gold": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'"}, {"question_id": 1504, "evidence": "In January, 2012 means Date contains '2012-01'", "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'", "difficulty": "simple", "query": "What is the average total price of the transactions taken place in January, 2012?", "db": "debit_card_specializing", "gold": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'"}, {"question_id": 1505, "evidence": "", "SQL": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00", "difficulty": "simple", "query": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?", "db": "debit_card_specializing", "gold": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00"}, {"question_id": 1506, "evidence": "Gas station in the Czech Republic implies that Country = CZE", "SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'", "difficulty": "moderate", "query": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.", "db": "debit_card_specializing", "gold": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'"}, {"question_id": 1507, "evidence": "", "SQL": "SELECT DISTINCT T1.Date, T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11", "difficulty": "simple", "query": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.", "db": "debit_card_specializing", "gold": "SELECT DISTINCT T1.Date, T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"}, {"question_id": 1508, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'", "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000", "difficulty": "simple", "query": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?", "db": "debit_card_specializing", "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000"}, {"question_id": 1509, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'", "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND strftime('%Y', T1.Date) >= 2012", "difficulty": "moderate", "query": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?", "db": "debit_card_specializing", "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND strftime('%Y', T1.Date) >= 2012"}, {"question_id": 1510, "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'", "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'", "difficulty": "simple", "query": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?", "db": "debit_card_specializing", "gold": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'"}, {"question_id": 1511, "evidence": "", "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'", "difficulty": "simple", "query": "For the customers who paid in the euro, what is their average total price of the transactions?", "db": "debit_card_specializing", "gold": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'"}, {"question_id": 1512, "evidence": "'2012/8/25' can be represented by '2012-08-25'", "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1", "difficulty": "simple", "query": "Which customer paid the most in 2012/8/25?", "db": "debit_card_specializing", "gold": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1"}, {"question_id": 1513, "evidence": "'2012/8/25' can be represented by '2012-08-25'", "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1", "difficulty": "simple", "query": "Which country's gas station had the first paid cusomer in 2012/8/25?", "db": "debit_card_specializing", "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1"}, {"question_id": 1514, "evidence": "'2012/8/24' can be represented by '2012-08-24'", "SQL": "SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'", "difficulty": "simple", "query": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "db": "debit_card_specializing", "gold": "SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'"}, {"question_id": 1515, "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database", "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'", "difficulty": "simple", "query": "What segment did the customer have at 2012/8/23 21:20:00?", "db": "debit_card_specializing", "gold": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'"}, {"question_id": 1516, "evidence": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'", "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'EUR'", "difficulty": "moderate", "query": "How many transactions were paid in EUR in the morning of 2012/8/26?", "db": "debit_card_specializing", "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'EUR'"}, {"question_id": 1517, "evidence": "", "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1", "difficulty": "simple", "query": "For the earliest customer, what segment did he/she have?", "db": "debit_card_specializing", "gold": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1"}, {"question_id": 1518, "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database", "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'", "difficulty": "simple", "query": "For the deal happened at 2012/8/24 12:42:00, which country was it?", "db": "debit_card_specializing", "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"}, {"question_id": 1519, "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database", "SQL": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'", "difficulty": "simple", "query": "What was the product name of the transaction happened at 2012/8/23 21:20:00?", "db": "debit_card_specializing", "gold": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'"}, {"question_id": 1520, "evidence": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning.", "SQL": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'", "difficulty": "moderate", "query": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?", "db": "debit_card_specializing", "gold": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'"}, {"question_id": 1521, "evidence": "Gas station in the Czech Republic implies that Country = CZE; '2012/8/26' can be represented by '2012-08-26'", "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'", "difficulty": "moderate", "query": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?", "db": "debit_card_specializing", "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'"}, {"question_id": 1522, "evidence": "June of 2013 means Date contains '201306' in the yearmonth.date of the database", "SQL": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17", "difficulty": "simple", "query": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?", "db": "debit_card_specializing", "gold": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17"}, {"question_id": 1523, "evidence": "", "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'", "difficulty": "simple", "query": "Which country was the card owner of No.667467 in?", "db": "debit_card_specializing", "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'"}, {"question_id": 1524, "evidence": "'2012/8/24' can be represented by '2012-08-24'", "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4", "difficulty": "simple", "query": "What's the nationality of the customer who spent 548.4 in 2012/8/24?", "db": "debit_card_specializing", "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4"}, {"question_id": 1525, "evidence": "'2012/8/25' can be represented by '2012-08-25'", "SQL": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'", "difficulty": "simple", "query": "What is the percentage of the customers who used EUR in 2012/8/25?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'"}, {"question_id": 1526, "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012", "SQL": "SELECT CAST(SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTRING(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )", "difficulty": "challenging", "query": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTRING(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )"}, {"question_id": 1527, "evidence": "", "SQL": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1", "difficulty": "simple", "query": "Which gas station has the highest amount of revenue?", "db": "debit_card_specializing", "gold": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1"}, {"question_id": 1528, "evidence": "", "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations", "difficulty": "simple", "query": "What is the percentage of \"premium\" against the overall segment in \"SVK\"?", "db": "debit_card_specializing", "gold": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations"}, {"question_id": 1529, "evidence": "January 2012 refers '201201' in the table transactions_1k", "SQL": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'", "difficulty": "moderate", "query": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?", "db": "debit_card_specializing", "gold": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'"}, {"question_id": 1530, "evidence": "Description of products contains full name", "SQL": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5", "difficulty": "simple", "query": "Which are the top five best selling products? Please state the full name of them.", "db": "debit_card_specializing", "gold": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5"}, {"question_id": 1531, "evidence": "verage price per single item = price / amount", "SQL": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency", "difficulty": "moderate", "query": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?", "db": "debit_card_specializing", "gold": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency"}, {"question_id": 1532, "evidence": "", "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1", "difficulty": "simple", "query": "Which country had the gas station that sold the most expensive product id No.2 for one unit?", "db": "debit_card_specializing", "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1"}, {"question_id": 1533, "evidence": "August of 2012 means Date contains '201208' in the yearmonth.date of the database; Price per unit of product = Price / Amount", "SQL": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'", "difficulty": "moderate", "query": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.", "db": "debit_card_specializing", "gold": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'"}]